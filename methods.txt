Thu Dec 8, 2011 (c) Marc Kuo
---------------------------------
This document is an overview of all the methods that are defined in the VRP CLOS. Reason for writing this document is that I often forget what the method name is, and/or it has been defined or not. This document needs to be updated each time a new method is defined.

The list of accessors are not shown here - refer to class-definitions.lisp for an overview.

-- util/network.lisp
node-distance (<Node> <Node>) 	    	 - returns distance
node (<Network>/<Problem> int)		 - returns Node, given ID
coords (<Node>/<Network>/<Problem>/<Vehicle>)- returns the relevant coords, given each object
dist-table (<Network>/<Problem)		 - returns the dist-table (obsolete accessor?)

-- util/fleet.lisp
vehicle (<Fleet>/<Problem> int)		 - returns <Vehicle>, given ID
route-indices (<Vehicle>)		 - returns the route as list of Node IDs
total-dist (<Vehicle>/<Network>)	 - returns the total distance of route/fleet

-- util/output.lisp
list-all-routes (<Fleet>/<Problem>)	 - returns list of <Node>lists
print-routes (<Fleet>/<Problem>)	 - prints routes, given the fleet

-- util/draw-solution.lisp
draw-nodes (<Drawer> <Network>)		 - Plots all <Nodes> in <Drawer> canvas (use plot-nodes)
plot-solution (<Drawer> <Problem>)	 - Output .png file with plot of current solution
plot-nodes (<Drawer> <Network>)		 - Output .png file showing only <Nodes>

-- util/fitness.lisp
fitness (<Problem>)			 - fitness function (to be specified further)

-- util/route.lisp
insert-node (<Vehicle> <Node> int)	 - inserts <Node> into the route of <Vehicle>, before i
append-node (<Vehicle> <Node>)		 - appends <Node> at end of route of <Vehicle>
remove-node (<Vehicle> int)		 - removes <Node> of route at i
last-node (<Vehicle>)  			 - returns last <Node> route
closest-node (<Vehicle> <Network>)	 + returns closest <Node> from location of <Vehicle>
closest-node (<Problem> int)		 + accepts <Problem> and vehicle ID
closest-unchosen-node (<Vehicle> <Network> list)   - ..given list of <Node> to ignore

-- util/algo.lisp
run-algo (<Problem> <Algo>) 	 	 - runs, prints solution, sets current/best solution
	 				   slots in <Algo> and return the <Algo> object
solve-tsp (<Problem> <Algo>)		 - NON-destructive wrapper for run-algo. 
re-init (<Fleet>/<Problem>)		 - Resets all vehicles to initial location

-- algo/tools.lisp
get-closest-vehicle (<Node> <Problem>)	 - returns <Vehicle> that is closest to given <Node>



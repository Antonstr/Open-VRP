Thu Nov 24, 2011 (c) Marc Kuo
-----------------------------
This document is an overview of the VRP program, its objects and the relations between them.
I lost the overview after a few weeks away from code, so this document serves as a note to refer to once in a while to get a bearing.

-- Usage: (solve-plot <Problem> <Algo>) - Solves and plots the result in one go

   	  (solve-tsp <Problem> <Algo>) NON-DESTRUCTIVE
   	  (run-algo <Problem> <Algo>)  DESTRUCTIVE
	  (plot-solution <Problem>)

A solution to the problem is defined as a <Fleet> object, which holds the <Fleet> objects, which each hold their respective 'route' (LIST of <Node>). 

The fitness is calculated given a <Fleet> object.

+ <Problem> defines the problem (to be inherited by VRP/VRPTW/CVRP...)
  - holds <Network> object (created using (create-network *node-coords*) in util-geometry.lisp)
    + <Network> is a class that defines the graph/network
       - holds LIST of <Node> objects (Using first node (ID = 0) as base node!)
       	 + <Node> is a location
	   - holds x and y coords
	   - holds ID
	   - (extensible with TW, load, revenue, etc..)
       - holds dist-table - a matrix of precalculated distances (will be used in calculations)
  - holds <Fleet> object (created using (create-fleet <network> ...) in util-vehicle.lisp)
    + <Fleet> is a class that defines the fleet
      - holds boolean 'from-depot' to define starting at Node 0
      - holds boolean 'to-depot' to define ending at Node 0
      - holds LIST of <Vehicle> objects
      	+ <Vehicle> is a class of the vehicle
	  - holds ID
	  - holds 'route' as LIST of <Node>s
	  - (extensible with capacity/speed, etc...)
  - holds <Drawer> object (created using the node-coords, to derive boundaries)
    + <Drawer> is the plotting object
      - holds 'min-coord' -- Defines the bounds of the canvas in coords
      - holds 'max-coord' -- these are automatically derived from *node-coords*
      - holds 'max-pix'   -- Defines the resolution of the canvas
      - holds 'legend-x'  -- location of the legend
      - holds 'legend-y'
      - holds 'filename'  -- defines the output filename
    
	  
+ <Algo> is a generic Algo class, to be used by inheritance
=> greedy-NN - greedy-insertion - tabu-search
  - holds 'name'
  - holds 'desc'
  - holds 'best-sol' for best solution found
  - holds 'best-fitness' for fitness of the above
  - holds 'current-sol' for the current solution (when algo is interrupted)
  - holds 'iterations' to count the number of iterations left

====== (wip)

=> <Tabu-search> inherits <algo>
  - holds 'moves' which states (quote) what class of moves will be used
  - holds 'init-heur' which states what heuristic will be used for initial solution

+ <Move> is the object describing a potential move
=> best-insertion-move - insertion-move
  - holds 'fitness' -- after assessing move, this move gets a score

=> <best-insertion-move> inherits <Move>
  - holds 'node-ID' which is the <Node> to be moved
  - holds 'vehicle-ID' in which the <Node> will be 'best-inserted'

=> <insertion-move> inherits <Move>
  - holds 'node-ID' which is the <Node> to be moved
  - holds 'vehicle-ID' in which the <Node> will be 'best-inserted'
  - holds 'index' which depicts before which node to insert the node.
